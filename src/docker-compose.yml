services:
 proxy:
   image: traefik
   container_name: traefik
   restart: unless-stopped
   networks:
     - cloud
   command:
     - "--log.level=DEBUG"
     - "--api.insecure=true"
     - "--providers.docker=true"
     - "--providers.docker.exposedbydefault=false"
     - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
     - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=duckdns"
     - "--certificatesresolvers.letsencrypt.acme.email=mail@mail.com"
     - "--certificatesresolvers.letsencrypt.acme.dnschallenge.disablePropagationCheck=true"
     - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
     - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
     - "--entrypoints.web.address=:80"
     - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
     - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
     - "--entrypoints.websecure.address=:443"
     - "--entrypoints.websecure.http.tls=true"
     - "--entrypoints.websecure.http.tls.certresolver=letsencrypt"
     - "--entrypoints.websecure.http.tls.domains[0].main=${REDASINFONUAGE}"
     - "--entrypoints.websecure.http.tls.domains[0].sans=*.${REDASINFONUAGE}"
   volumes:
     - "../data/traefik/letsencrypt:/letsencrypt"
     - "/var/run/docker.sock:/var/run/docker.sock:ro"
   labels:
     - "traefik.enable=true"
     - "traefik.http.routers.api.rule=Host(`${REDASINFONUAGE}`)"
     - "traefik.http.routers.api.entrypoints=websecure"
     - "traefik.http.routers.api.service=api@internal"
   ports:
     - "80:80"
     - "443:443"
   environment:
     - DUCKDNS_TOKEN=${DUCKDNS_TOKEN}
 client:
   image: redasaci/final-dock:v2
   build:
     context: ./fullstack
   networks:
     - cloud
   labels:
     - "traefik.enable=true"
     - "traefik.http.routers.client.rule=Host(`client.${REDASINFONUAGE}`)"
     - "traefik.http.routers.client.entrypoints=websecure"
     - "traefik.http.routers.client.tls.certresolver=letsencrypt"
     - "traefik.http.services.client.loadbalancer.server.port=8080"
   environment:
     - NODE_ENV=development
 portainer:
   image: portainer/portainer-ce:alpine
   container_name: portainer
   restart: unless-stopped
   networks:
     - cloud
   ports:
     - "9000:9000"
   volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - portainer_data:/data
    ## pour jellyfin 
 jellyfin:
   image: jellyfin/jellyfin:latest
   container_name: jellyfin
   restart: unless-stopped
   networks:
     - cloud
   ports:
     - "8096:8096"
   environment:
     - TZ=America/Montreal
   volumes:
     - jellyfin_data:/config
     - /mnt/media/Movies:/movies
     - /mnt/media/TV:/tv
volumes:
 portainer_data:
 jellyfin_data:
networks:
 cloud:
   driver: bridge